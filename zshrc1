########################################################################
# Monolithic Optimized Zsh Configuration with Magic Tab Completion
#
# This configuration file implements a host of advanced interactive
# features, including:
#   • Global feature toggles for modularity.
#   • Enhanced history management.
#   • Advanced tab completion with menu–select.
#   • Minimal syntax highlighting and autosuggestions.
#   • A dynamic prompt with Git branch, Docker, Python venv,
#     system load, directory stack, and time.
#   • Command duration measurement and exit-status notifications.
#   • Utility functions (e.g. cgtop, explain) and auto-ls on directory change.
#   • Aggressive path expansion and custom keybindings.
#   • NEW: Magic Tab Completion that works for all commands—including Git,
#          with forward (Tab) and backward (Shift‑Tab) cycling.
########################################################################

#############################
# 1. Global Feature Toggles #
#############################
# Each toggle is set to 1 (enabled) by default. Override by setting them
# (e.g. in /etc/zshenv or earlier in your shell startup) before sourcing this file.

: ${ZSH_FEATURE_SYNTAX_HIGHLIGHT:=1}      # Minimal syntax highlighting
: ${ZSH_FEATURE_AUTOSUGGEST:=1}           # Minimal autosuggestions based on history
: ${ZSH_FEATURE_GIT:=1}                   # Git branch display in prompt
: ${ZSH_FEATURE_DOCKER_PROMPT:=1}         # Docker container detection
: ${ZSH_FEATURE_PYTHON_VENV_PROMPT:=1}    # Python virtualenv display in prompt
: ${ZSH_FEATURE_SYSTEM_LOAD:=1}           # System load average in prompt
: ${ZSH_FEATURE_DIR_STACK:=1}             # Directory stack summary
: ${ZSH_FEATURE_RPROMPT_TIME:=1}          # Current time in right prompt
: ${ZSH_FEATURE_COMMAND_DURATION:=1}      # Last command duration measurement
: ${ZSH_FEATURE_EXIT_STATUS:=1}           # Display nonzero exit statuses
: ${ZSH_FEATURE_CD_TO_GIT_ROOT:=1}         # Provide cgtop to jump to Git repo root
: ${ZSH_FEATURE_EXPLAIN:=1}               # Provide explain command utility
: ${ZSH_FEATURE_AUTO_LS_AFTER_CD:=1}      # Auto-run ls after directory changes
: ${ZSH_FEATURE_FZF_HISTORY:=0}           # Optional: FZF-based history search (if fzf installed)
: ${ZSH_FEATURE_PATH_EXPANSION:=1}        # Aggressive path expansion and auto-cd
: ${ZSH_FEATURE_KEYBINDINGS:=1}           # Custom keybindings & ZLE widgets
: ${ZSH_FEATURE_LS_COLORS:=1}             # Custom LS_COLORS
: ${ZSH_FEATURE_MAGIC_TAB:=1}             # NEW: Advanced, “magical” tab completion

#############################
# 2. Basic Environment      #
#############################
# History settings and shell options.

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_IGNORE_DUPS HIST_IGNORE_ALL_DUPS SHARE_HISTORY

# Enable extended globbing and auto-cd features if path expansion is on.
if (( ZSH_FEATURE_PATH_EXPANSION )); then
  setopt EXTENDED_GLOB AUTO_CD CDABLE_VARS AUTO_NAME_DIR
fi

#############################
# 3. Tab Completion         #
#############################
# Initialize Zsh’s built-in completion system.
autoload -Uz compinit && compinit

# Standard formatting for completion candidates.
zstyle ':completion:*:descriptions' format '%F{blue}%d%f'
zstyle ':completion:*:warnings' format '%F{red}No matches for: %d%f'

# If Magic Tab Completion is enabled, set up a menu–select mode.
if (( ZSH_FEATURE_MAGIC_TAB )); then
  zstyle ':completion:*' menu select=long
  zstyle ':completion:*' select-prompt '%SScrolling active: Use TAB for next, Shift-TAB for previous%s'
else
  # Otherwise, use the default completion behavior.
  zstyle ':completion:*' menu select=0
fi

#############################
# 4. Minimal Syntax Highlight #
#############################
if (( ZSH_FEATURE_SYNTAX_HIGHLIGHT )); then
  # A minimal highlighter: if the first token is not found, highlight it in red.
  function _syntax_highlight() {
    local buf=$BUFFER
    local cmd=${buf%% *}
    if [[ -n $cmd && -z $(whence -p "$cmd") ]]; then
      BUFFER="%{$fg[red]%}$buf%{$reset_color%}"
      zle reset-prompt
    fi
  }
  zle -N _syntax_highlight
  autoload -Uz add-zle-hook-widget && add-zle-hook-widget line-pre-redraw _syntax_highlight
fi

#############################
# 5. Minimal Autosuggestions #
#############################
if (( ZSH_FEATURE_AUTOSUGGEST )); then
  # A simple autosuggestion: search history for a command matching the current input.
  function _autosuggest() {
    local prefix=$LBUFFER suggestion=""
    suggestion=$(fc -rl 1 | grep -m 1 "^${prefix}")
    if [[ -n $suggestion ]]; then
      suggestion=${suggestion#$prefix}
      ZLE_RPROMPT="%{$fg[black]%}$suggestion%{$reset_color%}"
    else
      ZLE_RPROMPT=""
    fi
    zle reset-prompt
  }
  zle -N _autosuggest
  add-zle-hook-widget line-pre-redraw _autosuggest
fi

#############################
# 6. Prompt Segments        #
#############################
# Functions that return parts of the prompt.

# 6.1 Git branch detection.
function _prompt_git_branch() {
  if (( ZSH_FEATURE_GIT )); then
    if git rev-parse --is-inside-work-tree &>/dev/null; then
      local branch
      branch=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
      [[ -n $branch ]] && echo "%F{magenta}($branch)%f "
    fi
  fi
}

# 6.2 Docker container detection.
function _prompt_docker() {
  if (( ZSH_FEATURE_DOCKER_PROMPT )); then
    if grep -q 'docker' /proc/1/cgroup 2>/dev/null; then
      local cid
      cid=$(grep 'docker' /proc/self/cgroup | sed 's|.*docker/[^/]*.*|\1|' | head -n1)
      [[ -n $cid ]] && echo "%F{green}docker:${cid:0:8}%f "
    fi
  fi
}

# 6.3 Python virtual environment.
function _prompt_venv() {
  if (( ZSH_FEATURE_PYTHON_VENV_PROMPT )) && [[ -n "$VIRTUAL_ENV" ]]; then
    local venv=${VIRTUAL_ENV##*/}
    echo "%F{cyan}[$venv]%f "
  fi
}

# 6.4 System load display.
function _prompt_load() {
  if (( ZSH_FEATURE_SYSTEM_LOAD )); then
    local load
    load=$(awk '{print $1}' /proc/loadavg 2>/dev/null)
    [[ -n $load ]] && echo "%F{yellow}load:$load%f "
  fi
}

# 6.5 Directory stack summary.
function _prompt_dirstack() {
  if (( ZSH_FEATURE_DIR_STACK )) && (( ${#dirstack[@]} > 1 )); then
    echo "(StackTop=${dirstack[1]}) "
  fi
}

# 6.6 Right prompt: current time.
function _prompt_time() {
  if (( ZSH_FEATURE_RPROMPT_TIME )); then
    echo "%F{yellow}%*%f"
  fi
}

#############################
# 7. Build the Prompt       #
#############################
# Assemble the left (PROMPT) and right (RPROMPT) parts.
function _build_prompt() {
  PROMPT="%B%F{blue}%n@%m%f%b:%B%F{green}%~%f%b "  # user@host:current-directory
  PROMPT+=$(_prompt_docker)
  PROMPT+=$(_prompt_venv)
  PROMPT+=$(_prompt_git_branch)
  PROMPT+=$(_prompt_dirstack)
  PROMPT+="%# "  # prompt symbol (% for user, # for root)
  RPROMPT=$(_prompt_time)
}
_build_prompt

#############################
# 8. Command Timing & Exit  #
#############################
# Record command start time and, after execution, display duration and exit status.
typeset -g __cmd_start=0
typeset -g __cmd_duration=0

function preexec() {
  __cmd_start=$EPOCHSECONDS
}
zle -N preexec

function precmd() {
  if (( ZSH_FEATURE_COMMAND_DURATION )); then
    __cmd_duration=$(( EPOCHSECONDS - __cmd_start ))
    if (( __cmd_duration > 0 )); then
      echo "%F{cyan}[Cmd took: ${__cmd_duration}s]%f"
    fi
  fi
  if (( ZSH_FEATURE_EXIT_STATUS )) && (( $? != 0 )); then
    echo "%B%F{red}[Exit: $?]%f%b"
  fi
  _build_prompt
}
zle -N precmd

#############################
# 9. Utility Functions      #
#############################

# 9.1 cgtop: Change directory to the top-level Git repository.
if (( ZSH_FEATURE_CD_TO_GIT_ROOT )); then
  function cgtop() {
    if git rev-parse --is-inside-work-tree &>/dev/null; then
      cd "$(git rev-parse --show-toplevel)" || return
    else
      echo "Not inside a Git repository."
    fi
  }
fi

# 9.2 explain: Provide basic command information.
if (( ZSH_FEATURE_EXPLAIN )); then
  function explain() {
    if [[ -z "$1" ]]; then
      echo "Usage: explain <command>"
      return 1
    fi
    echo "----- Command Info -----"
    whence -v "$1"
    echo ""
    echo "----- Man Page Summary -----"
    man -f "$1" 2>/dev/null || echo "No man page found."
  }
fi

#############################
# 10. Auto-listing on cd    #
#############################
if (( ZSH_FEATURE_AUTO_LS_AFTER_CD )); then
  function chpwd() {
    ls --color=auto
  }
fi

#############################
# 11. Custom LS_COLORS      #
#############################
if (( ZSH_FEATURE_LS_COLORS )); then
  export LS_COLORS="di=1;34:ln=36:so=35:pi=33:ex=1;32:*.md=1;35:*.txt=0;32"
fi

#############################
# 12. Optional FZF History  #
#############################
if (( ZSH_FEATURE_FZF_HISTORY )); then
  if command -v fzf >/dev/null; then
    function fzf-history-widget() {
      local selected
      selected=$(fc -l 1 | sort -r | fzf +s +m --ansi)
      if [[ -n $selected ]]; then
        LBUFFER=${selected#* }
        zle redisplay
      fi
    }
    zle -N fzf-history-widget
    bindkey '^R' fzf-history-widget
  fi
fi

#############################
# 13. Custom Keybindings     #
#############################
if (( ZSH_FEATURE_KEYBINDINGS )); then
  bindkey -e  # Use Emacs-style keybindings.
  bindkey '^P' up-line-or-history
  bindkey '^N' down-line-or-history
  # Example: Alt+L clears the screen, lists directory contents, and resets prompt.
  function clear_ls_widget() {
    clear
    ls --color=auto
    zle reset-prompt
  }
  zle -N clear_ls_widget
  bindkey '^[l' clear_ls_widget  # ESC + l (Alt+L)
fi

#############################
# 14. Aggressive Path Expansion #
#############################
# (Already enabled via AUTO_CD, CDABLE_VARS, AUTO_NAME_DIR, etc.)

#############################
# 15. Advanced Magic Tab Completion  #
#############################
if (( ZSH_FEATURE_MAGIC_TAB )); then
  # Bind Shift‑Tab to reverse-menu-complete.
  # The escape sequence for Shift‑Tab is terminal dependent; common values:
  if [[ -n "$terminfo[kRIT3]" ]]; then
    bindkey "$terminfo[kRIT3]" reverse-menu-complete
  else
    bindkey '^[[Z' reverse-menu-complete
  fi

  # (Re)inforce menu–select; already set above via zstyle.
  # Now add a custom Git command completion function to handle Git subcommands.
  function _git_custom_completion() {
    # Cache Git commands if not already cached.
    if [[ -z "${_GIT_COMMANDS+x}" ]]; then
      local out
      out=$(git help -a 2>/dev/null)
      # Parse lines that list commands (assuming they are indented).
      _GIT_COMMANDS=("${(f)$(echo "$out" | grep -E '^\s+[a-zA-Z0-9-]+' | awk '{print $1}')}")
    fi
    # compadd safely adds the candidates.
    compadd -U -S "" -- "${_GIT_COMMANDS[@]}"
  }
  # Bind this custom completion for the git command.
  compdef _git_custom_completion git
fi

########################################################################
# End of Monolithic Optimized Zsh Configuration
########################################################################
